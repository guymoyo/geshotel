// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.booking.domain;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.geshotel.booking.domain.Invoice;
import org.adorsys.geshotel.booking.domain.Reservation;
import org.adorsys.geshotel.domain.Customer;

privileged aspect Reservation_Roo_Finder {
    
    public static TypedQuery<Reservation> Reservation.findReservationsByCreationDateBetween(Date minCreationDate, Date maxCreationDate) {
        if (minCreationDate == null) throw new IllegalArgumentException("The minCreationDate argument is required");
        if (maxCreationDate == null) throw new IllegalArgumentException("The maxCreationDate argument is required");
        EntityManager em = Reservation.entityManager();
        TypedQuery<Reservation> q = em.createQuery("SELECT o FROM Reservation AS o WHERE o.creationDate BETWEEN :minCreationDate AND :maxCreationDate", Reservation.class);
        q.setParameter("minCreationDate", minCreationDate);
        q.setParameter("maxCreationDate", maxCreationDate);
        return q;
    }
    
    public static TypedQuery<Reservation> Reservation.findReservationsByCustomer(Customer customer) {
        if (customer == null) throw new IllegalArgumentException("The customer argument is required");
        EntityManager em = Reservation.entityManager();
        TypedQuery<Reservation> q = em.createQuery("SELECT o FROM Reservation AS o WHERE o.customer = :customer", Reservation.class);
        q.setParameter("customer", customer);
        return q;
    }
    
    public static TypedQuery<Reservation> Reservation.findReservationsByInvoice(Invoice invoice) {
        if (invoice == null) throw new IllegalArgumentException("The invoice argument is required");
        EntityManager em = Reservation.entityManager();
        TypedQuery<Reservation> q = em.createQuery("SELECT o FROM Reservation AS o WHERE o.invoice = :invoice", Reservation.class);
        q.setParameter("invoice", invoice);
        return q;
    }
    
}
