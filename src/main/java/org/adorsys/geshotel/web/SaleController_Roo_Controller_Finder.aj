// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.web;

import java.lang.String;
import java.util.Date;
import org.adorsys.geshotel.booking.domain.Invoice;
import org.adorsys.geshotel.domain.Customer;
import org.adorsys.geshotel.resto.domain.BarRestauState;
import org.adorsys.geshotel.resto.domain.CustomerType;
import org.adorsys.geshotel.resto.domain.Sale;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect SaleController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCustomer", "form" }, method = RequestMethod.GET)
    public String SaleController.findSalesByCustomerForm(Model uiModel) {
        uiModel.addAttribute("customers", Customer.findAllCustomers());
        return "sales/findSalesByCustomer";
    }
    
    @RequestMapping(params = "find=ByCustomer", method = RequestMethod.GET)
    public String SaleController.findSalesByCustomer(@RequestParam("customer") Customer customer, Model uiModel) {
        uiModel.addAttribute("sales", Sale.findSalesByCustomer(customer).getResultList());
        return "sales/list";
    }
    
    @RequestMapping(params = { "find=ByCustomerAndInvoice", "form" }, method = RequestMethod.GET)
    public String SaleController.findSalesByCustomerAndInvoiceForm(Model uiModel) {
        uiModel.addAttribute("customers", Customer.findAllCustomers());
        uiModel.addAttribute("invoices", Invoice.findAllInvoices());
        return "sales/findSalesByCustomerAndInvoice";
    }
    
    @RequestMapping(params = "find=ByCustomerAndInvoice", method = RequestMethod.GET)
    public String SaleController.findSalesByCustomerAndInvoice(@RequestParam("customer") Customer customer, @RequestParam("invoice") Invoice invoice, Model uiModel) {
        uiModel.addAttribute("sales", Sale.findSalesByCustomerAndInvoice(customer, invoice).getResultList());
        return "sales/list";
    }
    
    @RequestMapping(params = { "find=ByInvoice", "form" }, method = RequestMethod.GET)
    public String SaleController.findSalesByInvoiceForm(Model uiModel) {
        uiModel.addAttribute("invoices", Invoice.findAllInvoices());
        return "sales/findSalesByInvoice";
    }
    
    @RequestMapping(params = "find=ByInvoice", method = RequestMethod.GET)
    public String SaleController.findSalesByInvoice(@RequestParam("invoice") Invoice invoice, Model uiModel) {
        uiModel.addAttribute("sales", Sale.findSalesByInvoice(invoice).getResultList());
        return "sales/list";
    }
    
    @RequestMapping(params = { "find=ByRecordDateBetweenAndSaleState", "form" }, method = RequestMethod.GET)
    public String SaleController.findSalesByRecordDateBetweenAndSaleStateForm(Model uiModel) {
        uiModel.addAttribute("barrestaustates", java.util.Arrays.asList(BarRestauState.class.getEnumConstants()));
        addDateTimeFormatPatterns(uiModel);
        return "sales/findSalesByRecordDateBetweenAndSaleState";
    }
    
    @RequestMapping(params = "find=ByRecordDateBetweenAndSaleState", method = RequestMethod.GET)
    public String SaleController.findSalesByRecordDateBetweenAndSaleState(@RequestParam("minRecordDate") @DateTimeFormat(style = "M-") Date minRecordDate, @RequestParam("maxRecordDate") @DateTimeFormat(style = "M-") Date maxRecordDate, @RequestParam("saleState") BarRestauState saleState, Model uiModel) {
        uiModel.addAttribute("sales", Sale.findSalesByRecordDateBetweenAndSaleState(minRecordDate, maxRecordDate, saleState).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "sales/list";
    }
    
    @RequestMapping(params = { "find=ByRecordDateBetweenAndSaleStateAndCustomerType", "form" }, method = RequestMethod.GET)
    public String SaleController.findSalesByRecordDateBetweenAndSaleStateAndCustomerTypeForm(Model uiModel) {
        uiModel.addAttribute("barrestaustates", java.util.Arrays.asList(BarRestauState.class.getEnumConstants()));
        uiModel.addAttribute("customertypes", java.util.Arrays.asList(CustomerType.class.getEnumConstants()));
        addDateTimeFormatPatterns(uiModel);
        return "sales/findSalesByRecordDateBetweenAndSaleStateAndCustomerType";
    }
    
    @RequestMapping(params = "find=ByRecordDateBetweenAndSaleStateAndCustomerType", method = RequestMethod.GET)
    public String SaleController.findSalesByRecordDateBetweenAndSaleStateAndCustomerType(@RequestParam("minRecordDate") @DateTimeFormat(style = "M-") Date minRecordDate, @RequestParam("maxRecordDate") @DateTimeFormat(style = "M-") Date maxRecordDate, @RequestParam("saleState") BarRestauState saleState, @RequestParam("customerType") CustomerType customerType, Model uiModel) {
        uiModel.addAttribute("sales", Sale.findSalesByRecordDateBetweenAndSaleStateAndCustomerType(minRecordDate, maxRecordDate, saleState, customerType).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "sales/list";
    }
    
    @RequestMapping(params = { "find=BySaleKeyEquals", "form" }, method = RequestMethod.GET)
    public String SaleController.findSalesBySaleKeyEqualsForm(Model uiModel) {
        return "sales/findSalesBySaleKeyEquals";
    }
    
    @RequestMapping(params = "find=BySaleKeyEquals", method = RequestMethod.GET)
    public String SaleController.findSalesBySaleKeyEquals(@RequestParam("saleKey") String saleKey, Model uiModel) {
        uiModel.addAttribute("sales", Sale.findSalesBySaleKeyEquals(saleKey).getResultList());
        return "sales/list";
    }
    
    @RequestMapping(params = { "find=BySaleState", "form" }, method = RequestMethod.GET)
    public String SaleController.findSalesBySaleStateForm(Model uiModel) {
        uiModel.addAttribute("barrestaustates", java.util.Arrays.asList(BarRestauState.class.getEnumConstants()));
        return "sales/findSalesBySaleState";
    }
    
    @RequestMapping(params = "find=BySaleState", method = RequestMethod.GET)
    public String SaleController.findSalesBySaleState(@RequestParam("saleState") BarRestauState saleState, Model uiModel) {
        uiModel.addAttribute("sales", Sale.findSalesBySaleState(saleState).getResultList());
        return "sales/list";
    }
    
    @RequestMapping(params = { "find=BySaleStateAndRecordDateBetween", "form" }, method = RequestMethod.GET)
    public String SaleController.findSalesBySaleStateAndRecordDateBetweenForm(Model uiModel) {
        uiModel.addAttribute("barrestaustates", java.util.Arrays.asList(BarRestauState.class.getEnumConstants()));
        addDateTimeFormatPatterns(uiModel);
        return "sales/findSalesBySaleStateAndRecordDateBetween";
    }
    
    @RequestMapping(params = "find=BySaleStateAndRecordDateBetween", method = RequestMethod.GET)
    public String SaleController.findSalesBySaleStateAndRecordDateBetween(@RequestParam("saleState") BarRestauState saleState, @RequestParam("minRecordDate") @DateTimeFormat(style = "M-") Date minRecordDate, @RequestParam("maxRecordDate") @DateTimeFormat(style = "M-") Date maxRecordDate, Model uiModel) {
        uiModel.addAttribute("sales", Sale.findSalesBySaleStateAndRecordDateBetween(saleState, minRecordDate, maxRecordDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "sales/list";
    }
    
}
