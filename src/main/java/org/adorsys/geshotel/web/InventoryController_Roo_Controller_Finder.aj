// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.web;

import java.lang.Boolean;
import java.lang.String;
import java.util.Date;
import org.adorsys.geshotel.domain.UserAccount;
import org.adorsys.geshotel.resto.domain.BarRestauState;
import org.adorsys.geshotel.resto.domain.Inventory;
import org.adorsys.geshotel.resto.domain.PeriodConf;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect InventoryController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByInventoryDateBetween", "form" }, method = RequestMethod.GET)
    public String InventoryController.findInventorysByInventoryDateBetweenForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "inventorys/findInventorysByInventoryDateBetween";
    }
    
    @RequestMapping(params = "find=ByInventoryDateBetween", method = RequestMethod.GET)
    public String InventoryController.findInventorysByInventoryDateBetween(@RequestParam("minInventoryDate") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date minInventoryDate, @RequestParam("maxInventoryDate") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date maxInventoryDate, Model uiModel) {
        uiModel.addAttribute("inventorys", Inventory.findInventorysByInventoryDateBetween(minInventoryDate, maxInventoryDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "inventorys/list";
    }
    
    @RequestMapping(params = { "find=ByInventoryDateBetweenAndIsClosedNot", "form" }, method = RequestMethod.GET)
    public String InventoryController.findInventorysByInventoryDateBetweenAndIsClosedNotForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "inventorys/findInventorysByInventoryDateBetweenAndIsClosedNot";
    }
    
    @RequestMapping(params = "find=ByInventoryDateBetweenAndIsClosedNot", method = RequestMethod.GET)
    public String InventoryController.findInventorysByInventoryDateBetweenAndIsClosedNot(@RequestParam("minInventoryDate") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date minInventoryDate, @RequestParam("maxInventoryDate") @DateTimeFormat(pattern = "dd-MM-yyyy HH:mm") Date maxInventoryDate, @RequestParam(value = "isClosed", required = false) Boolean isClosed, Model uiModel) {
        uiModel.addAttribute("inventorys", Inventory.findInventorysByInventoryDateBetweenAndIsClosedNot(minInventoryDate, maxInventoryDate, isClosed == null ? new Boolean(false) : isClosed).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "inventorys/list";
    }
    
    @RequestMapping(params = { "find=ByIsClosedNot", "form" }, method = RequestMethod.GET)
    public String InventoryController.findInventorysByIsClosedNotForm(Model uiModel) {
        return "inventorys/findInventorysByIsClosedNot";
    }
    
    @RequestMapping(params = "find=ByIsClosedNot", method = RequestMethod.GET)
    public String InventoryController.findInventorysByIsClosedNot(@RequestParam(value = "isClosed", required = false) Boolean isClosed, Model uiModel) {
        uiModel.addAttribute("inventorys", Inventory.findInventorysByIsClosedNot(isClosed == null ? new Boolean(false) : isClosed).getResultList());
        return "inventorys/list";
    }
    
    @RequestMapping(params = { "find=ByPeriodConf", "form" }, method = RequestMethod.GET)
    public String InventoryController.findInventorysByPeriodConfForm(Model uiModel) {
        uiModel.addAttribute("periodconfs", PeriodConf.findAllPeriodConfs());
        return "inventorys/findInventorysByPeriodConf";
    }
    
    @RequestMapping(params = "find=ByPeriodConf", method = RequestMethod.GET)
    public String InventoryController.findInventorysByPeriodConf(@RequestParam("periodConf") PeriodConf periodConf, Model uiModel) {
        uiModel.addAttribute("inventorys", Inventory.findInventorysByPeriodConf(periodConf).getResultList());
        return "inventorys/list";
    }
    
    @RequestMapping(params = { "find=ByTitleEquals", "form" }, method = RequestMethod.GET)
    public String InventoryController.findInventorysByTitleEqualsForm(Model uiModel) {
        return "inventorys/findInventorysByTitleEquals";
    }
    
    @RequestMapping(params = "find=ByTitleEquals", method = RequestMethod.GET)
    public String InventoryController.findInventorysByTitleEquals(@RequestParam("title") String title, Model uiModel) {
        uiModel.addAttribute("inventorys", Inventory.findInventorysByTitleEquals(title).getResultList());
        return "inventorys/list";
    }
    
    @RequestMapping(params = { "find=ByUserAccountAndInventoryState", "form" }, method = RequestMethod.GET)
    public String InventoryController.findInventorysByUserAccountAndInventoryStateForm(Model uiModel) {
        uiModel.addAttribute("useraccounts", UserAccount.findAllUserAccounts());
        uiModel.addAttribute("barrestaustates", java.util.Arrays.asList(BarRestauState.class.getEnumConstants()));
        return "inventorys/findInventorysByUserAccountAndInventoryState";
    }
    
    @RequestMapping(params = "find=ByUserAccountAndInventoryState", method = RequestMethod.GET)
    public String InventoryController.findInventorysByUserAccountAndInventoryState(@RequestParam("userAccount") UserAccount userAccount, @RequestParam("inventoryState") BarRestauState inventoryState, Model uiModel) {
        uiModel.addAttribute("inventorys", Inventory.findInventorysByUserAccountAndInventoryState(userAccount, inventoryState).getResultList());
        return "inventorys/list";
    }
    
}
