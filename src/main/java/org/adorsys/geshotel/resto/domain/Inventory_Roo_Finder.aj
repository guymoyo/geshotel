// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.Boolean;
import java.lang.String;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.geshotel.domain.UserAccount;
import org.adorsys.geshotel.resto.domain.BarRestauState;
import org.adorsys.geshotel.resto.domain.Inventory;
import org.adorsys.geshotel.resto.domain.PeriodConf;

privileged aspect Inventory_Roo_Finder {
    
    public static TypedQuery<Inventory> Inventory.findInventorysByInventoryDateBetween(Date minInventoryDate, Date maxInventoryDate) {
        if (minInventoryDate == null) throw new IllegalArgumentException("The minInventoryDate argument is required");
        if (maxInventoryDate == null) throw new IllegalArgumentException("The maxInventoryDate argument is required");
        EntityManager em = Inventory.entityManager();
        TypedQuery<Inventory> q = em.createQuery("SELECT o FROM Inventory AS o WHERE o.inventoryDate BETWEEN :minInventoryDate AND :maxInventoryDate", Inventory.class);
        q.setParameter("minInventoryDate", minInventoryDate);
        q.setParameter("maxInventoryDate", maxInventoryDate);
        return q;
    }
    
    public static TypedQuery<Inventory> Inventory.findInventorysByInventoryDateBetweenAndIsClosedNot(Date minInventoryDate, Date maxInventoryDate, Boolean isClosed) {
        if (minInventoryDate == null) throw new IllegalArgumentException("The minInventoryDate argument is required");
        if (maxInventoryDate == null) throw new IllegalArgumentException("The maxInventoryDate argument is required");
        if (isClosed == null) throw new IllegalArgumentException("The isClosed argument is required");
        EntityManager em = Inventory.entityManager();
        TypedQuery<Inventory> q = em.createQuery("SELECT o FROM Inventory AS o WHERE o.inventoryDate BETWEEN :minInventoryDate AND :maxInventoryDate  AND o.isClosed IS NOT :isClosed", Inventory.class);
        q.setParameter("minInventoryDate", minInventoryDate);
        q.setParameter("maxInventoryDate", maxInventoryDate);
        q.setParameter("isClosed", isClosed);
        return q;
    }
    
    public static TypedQuery<Inventory> Inventory.findInventorysByIsClosedNot(Boolean isClosed) {
        if (isClosed == null) throw new IllegalArgumentException("The isClosed argument is required");
        EntityManager em = Inventory.entityManager();
        TypedQuery<Inventory> q = em.createQuery("SELECT o FROM Inventory AS o WHERE o.isClosed IS NOT :isClosed", Inventory.class);
        q.setParameter("isClosed", isClosed);
        return q;
    }
    
    public static TypedQuery<Inventory> Inventory.findInventorysByPeriodConf(PeriodConf periodConf) {
        if (periodConf == null) throw new IllegalArgumentException("The periodConf argument is required");
        EntityManager em = Inventory.entityManager();
        TypedQuery<Inventory> q = em.createQuery("SELECT o FROM Inventory AS o WHERE o.periodConf = :periodConf", Inventory.class);
        q.setParameter("periodConf", periodConf);
        return q;
    }
    
    public static TypedQuery<Inventory> Inventory.findInventorysByTitleEquals(String title) {
        if (title == null || title.length() == 0) throw new IllegalArgumentException("The title argument is required");
        EntityManager em = Inventory.entityManager();
        TypedQuery<Inventory> q = em.createQuery("SELECT o FROM Inventory AS o WHERE o.title = :title", Inventory.class);
        q.setParameter("title", title);
        return q;
    }
    
    public static TypedQuery<Inventory> Inventory.findInventorysByUserAccountAndInventoryState(UserAccount userAccount, BarRestauState inventoryState) {
        if (userAccount == null) throw new IllegalArgumentException("The userAccount argument is required");
        if (inventoryState == null) throw new IllegalArgumentException("The inventoryState argument is required");
        EntityManager em = Inventory.entityManager();
        TypedQuery<Inventory> q = em.createQuery("SELECT o FROM Inventory AS o WHERE o.userAccount = :userAccount AND o.inventoryState = :inventoryState", Inventory.class);
        q.setParameter("userAccount", userAccount);
        q.setParameter("inventoryState", inventoryState);
        return q;
    }
    
}
