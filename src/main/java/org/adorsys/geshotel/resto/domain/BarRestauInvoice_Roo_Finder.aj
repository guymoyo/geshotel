// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.geshotel.booking.domain.InvoiceState;
import org.adorsys.geshotel.resto.domain.BarRestauInvoice;
import org.adorsys.geshotel.resto.domain.Sale;

privileged aspect BarRestauInvoice_Roo_Finder {
    
    public static TypedQuery<BarRestauInvoice> BarRestauInvoice.findBarRestauInvoicesByBarRestauInvoiceKeyEquals(String barRestauInvoiceKey) {
        if (barRestauInvoiceKey == null || barRestauInvoiceKey.length() == 0) throw new IllegalArgumentException("The barRestauInvoiceKey argument is required");
        EntityManager em = BarRestauInvoice.entityManager();
        TypedQuery<BarRestauInvoice> q = em.createQuery("SELECT o FROM BarRestauInvoice AS o WHERE o.barRestauInvoiceKey = :barRestauInvoiceKey", BarRestauInvoice.class);
        q.setParameter("barRestauInvoiceKey", barRestauInvoiceKey);
        return q;
    }
    
    public static TypedQuery<BarRestauInvoice> BarRestauInvoice.findBarRestauInvoicesByCreationDateBetween(Date minCreationDate, Date maxCreationDate) {
        if (minCreationDate == null) throw new IllegalArgumentException("The minCreationDate argument is required");
        if (maxCreationDate == null) throw new IllegalArgumentException("The maxCreationDate argument is required");
        EntityManager em = BarRestauInvoice.entityManager();
        TypedQuery<BarRestauInvoice> q = em.createQuery("SELECT o FROM BarRestauInvoice AS o WHERE o.creationDate BETWEEN :minCreationDate AND :maxCreationDate", BarRestauInvoice.class);
        q.setParameter("minCreationDate", minCreationDate);
        q.setParameter("maxCreationDate", maxCreationDate);
        return q;
    }
    
    public static TypedQuery<BarRestauInvoice> BarRestauInvoice.findBarRestauInvoicesByInvoiceNumberEquals(String invoiceNumber) {
        if (invoiceNumber == null || invoiceNumber.length() == 0) throw new IllegalArgumentException("The invoiceNumber argument is required");
        EntityManager em = BarRestauInvoice.entityManager();
        TypedQuery<BarRestauInvoice> q = em.createQuery("SELECT o FROM BarRestauInvoice AS o WHERE o.invoiceNumber = :invoiceNumber", BarRestauInvoice.class);
        q.setParameter("invoiceNumber", invoiceNumber);
        return q;
    }
    
    public static TypedQuery<BarRestauInvoice> BarRestauInvoice.findBarRestauInvoicesByInvoiceState(InvoiceState invoiceState) {
        if (invoiceState == null) throw new IllegalArgumentException("The invoiceState argument is required");
        EntityManager em = BarRestauInvoice.entityManager();
        TypedQuery<BarRestauInvoice> q = em.createQuery("SELECT o FROM BarRestauInvoice AS o WHERE o.invoiceState = :invoiceState", BarRestauInvoice.class);
        q.setParameter("invoiceState", invoiceState);
        return q;
    }
    
    public static TypedQuery<BarRestauInvoice> BarRestauInvoice.findBarRestauInvoicesBySale(Sale sale) {
        if (sale == null) throw new IllegalArgumentException("The sale argument is required");
        EntityManager em = BarRestauInvoice.entityManager();
        TypedQuery<BarRestauInvoice> q = em.createQuery("SELECT o FROM BarRestauInvoice AS o WHERE o.sale = :sale", BarRestauInvoice.class);
        q.setParameter("sale", sale);
        return q;
    }
    
}
