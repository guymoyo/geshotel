// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.domain;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.adorsys.geshotel.booking.domain.Invoice;
import org.adorsys.geshotel.domain.Payment;
import org.adorsys.geshotel.domain.UserAccount;

privileged aspect Payment_Roo_Finder {
    
    public static TypedQuery<Payment> Payment.findPaymentsByCasheir(UserAccount casheir) {
        if (casheir == null) throw new IllegalArgumentException("The casheir argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery<Payment> q = em.createQuery("SELECT o FROM Payment AS o WHERE o.casheir = :casheir", Payment.class);
        q.setParameter("casheir", casheir);
        return q;
    }
    
    public static TypedQuery<Payment> Payment.findPaymentsByCasheirAndDatePayemmentBetween(UserAccount casheir, Date minDatePayemment, Date maxDatePayemment) {
        if (casheir == null) throw new IllegalArgumentException("The casheir argument is required");
        if (minDatePayemment == null) throw new IllegalArgumentException("The minDatePayemment argument is required");
        if (maxDatePayemment == null) throw new IllegalArgumentException("The maxDatePayemment argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery<Payment> q = em.createQuery("SELECT o FROM Payment AS o WHERE o.casheir = :casheir AND o.datePayemment BETWEEN :minDatePayemment AND :maxDatePayemment", Payment.class);
        q.setParameter("casheir", casheir);
        q.setParameter("minDatePayemment", minDatePayemment);
        q.setParameter("maxDatePayemment", maxDatePayemment);
        return q;
    }
    
    public static TypedQuery<Payment> Payment.findPaymentsByDatePayemmentBetween(Date minDatePayemment, Date maxDatePayemment) {
        if (minDatePayemment == null) throw new IllegalArgumentException("The minDatePayemment argument is required");
        if (maxDatePayemment == null) throw new IllegalArgumentException("The maxDatePayemment argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery<Payment> q = em.createQuery("SELECT o FROM Payment AS o WHERE o.datePayemment BETWEEN :minDatePayemment AND :maxDatePayemment", Payment.class);
        q.setParameter("minDatePayemment", minDatePayemment);
        q.setParameter("maxDatePayemment", maxDatePayemment);
        return q;
    }
    
    public static TypedQuery<Payment> Payment.findPaymentsByInvoice(Invoice invoice) {
        if (invoice == null) throw new IllegalArgumentException("The invoice argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery<Payment> q = em.createQuery("SELECT o FROM Payment AS o WHERE o.invoice = :invoice", Payment.class);
        q.setParameter("invoice", invoice);
        return q;
    }
    
}
