// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.booking.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.booking.domain.Invoice;
import org.adorsys.geshotel.booking.domain.InvoiceDataOnDemand;
import org.adorsys.geshotel.booking.domain.Reservation;
import org.adorsys.geshotel.booking.domain.ReservationState;
import org.adorsys.geshotel.booking.domain.Room;
import org.adorsys.geshotel.booking.domain.RoomDataOnDemand;
import org.adorsys.geshotel.domain.Customer;
import org.adorsys.geshotel.domain.CustomerDataOnDemand;
import org.adorsys.geshotel.domain.UserAccount;
import org.adorsys.geshotel.domain.UserAccountDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ReservationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ReservationDataOnDemand: @Component;
    
    private Random ReservationDataOnDemand.rnd = new SecureRandom();
    
    private List<Reservation> ReservationDataOnDemand.data;
    
    @Autowired
    private CustomerDataOnDemand ReservationDataOnDemand.customerDataOnDemand;
    
    @Autowired
    private InvoiceDataOnDemand ReservationDataOnDemand.invoiceDataOnDemand;
    
    @Autowired
    private UserAccountDataOnDemand ReservationDataOnDemand.userAccountDataOnDemand;
    
    @Autowired
    private RoomDataOnDemand ReservationDataOnDemand.roomDataOnDemand;
    
    public Reservation ReservationDataOnDemand.getNewTransientReservation(int index) {
        Reservation obj = new Reservation();
        setAmount(obj, index);
        setCheckInDate(obj, index);
        setCheckOutDate(obj, index);
        setComplement(obj, index);
        setCreationDate(obj, index);
        setCustomer(obj, index);
        setDeposit(obj, index);
        setDiscount(obj, index);
        setInvoice(obj, index);
        setNumDays(obj, index);
        setNumOfPeople(obj, index);
        setOtherValue(obj, index);
        setReceipt(obj, index);
        setReduction(obj, index);
        setReservationState(obj, index);
        setRoom(obj, index);
        setTotalAmount(obj, index);
        return obj;
    }
    
    public void ReservationDataOnDemand.setAmount(Reservation obj, int index) {
        BigDecimal amount = BigDecimal.valueOf(index);
        obj.setAmount(amount);
    }
    
    public void ReservationDataOnDemand.setCheckInDate(Reservation obj, int index) {
        Date checkInDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCheckInDate(checkInDate);
    }
    
    public void ReservationDataOnDemand.setCheckOutDate(Reservation obj, int index) {
        Date checkOutDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCheckOutDate(checkOutDate);
    }
    
    public void ReservationDataOnDemand.setComplement(Reservation obj, int index) {
        String complement = "complement_" + index;
        if (complement.length() > 255) {
            complement = complement.substring(0, 255);
        }
        obj.setComplement(complement);
    }
    
    public void ReservationDataOnDemand.setCreationDate(Reservation obj, int index) {
        Date creationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreationDate(creationDate);
    }
    
    public void ReservationDataOnDemand.setCustomer(Reservation obj, int index) {
        Customer customer = customerDataOnDemand.getRandomCustomer();
        obj.setCustomer(customer);
    }
    
    public void ReservationDataOnDemand.setDeposit(Reservation obj, int index) {
        BigDecimal deposit = BigDecimal.valueOf(index);
        obj.setDeposit(deposit);
    }
    
    public void ReservationDataOnDemand.setDiscount(Reservation obj, int index) {
        int discount = index;
        obj.setDiscount(discount);
    }
    
    public void ReservationDataOnDemand.setInvoice(Reservation obj, int index) {
        Invoice invoice = invoiceDataOnDemand.getRandomInvoice();
        obj.setInvoice(invoice);
    }
    
    public void ReservationDataOnDemand.setNumDays(Reservation obj, int index) {
        int numDays = index;
        obj.setNumDays(numDays);
    }
    
    public void ReservationDataOnDemand.setNumOfPeople(Reservation obj, int index) {
        int numOfPeople = 1;
        obj.setNumOfPeople(numOfPeople);
    }
    
    public void ReservationDataOnDemand.setOtherValue(Reservation obj, int index) {
        BigDecimal otherValue = BigDecimal.valueOf(index);
        obj.setOtherValue(otherValue);
    }
    
    public void ReservationDataOnDemand.setReceipt(Reservation obj, int index) {
        UserAccount receipt = userAccountDataOnDemand.getRandomUserAccount();
        obj.setReceipt(receipt);
    }
    
    public void ReservationDataOnDemand.setReduction(Reservation obj, int index) {
        BigDecimal reduction = BigDecimal.valueOf(index);
        obj.setReduction(reduction);
    }
    
    public void ReservationDataOnDemand.setReservationState(Reservation obj, int index) {
        ReservationState reservationState = ReservationState.class.getEnumConstants()[0];
        obj.setReservationState(reservationState);
    }
    
    public void ReservationDataOnDemand.setRoom(Reservation obj, int index) {
        Room room = roomDataOnDemand.getRandomRoom();
        obj.setRoom(room);
    }
    
    public void ReservationDataOnDemand.setTotalAmount(Reservation obj, int index) {
        BigDecimal totalAmount = BigDecimal.valueOf(index);
        obj.setTotalAmount(totalAmount);
    }
    
    public Reservation ReservationDataOnDemand.getSpecificReservation(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Reservation obj = data.get(index);
        return Reservation.findReservation(obj.getId());
    }
    
    public Reservation ReservationDataOnDemand.getRandomReservation() {
        init();
        Reservation obj = data.get(rnd.nextInt(data.size()));
        return Reservation.findReservation(obj.getId());
    }
    
    public boolean ReservationDataOnDemand.modifyReservation(Reservation obj) {
        return false;
    }
    
    public void ReservationDataOnDemand.init() {
        data = Reservation.findReservationEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Reservation' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.booking.domain.Reservation>();
        for (int i = 0; i < 10; i++) {
            Reservation obj = getNewTransientReservation(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
