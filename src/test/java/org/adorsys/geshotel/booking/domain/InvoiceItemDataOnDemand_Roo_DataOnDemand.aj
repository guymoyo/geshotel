// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.booking.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.booking.domain.Invoice;
import org.adorsys.geshotel.booking.domain.InvoiceDataOnDemand;
import org.adorsys.geshotel.booking.domain.InvoiceItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect InvoiceItemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InvoiceItemDataOnDemand: @Component;
    
    private Random InvoiceItemDataOnDemand.rnd = new SecureRandom();
    
    private List<InvoiceItem> InvoiceItemDataOnDemand.data;
    
    @Autowired
    private InvoiceDataOnDemand InvoiceItemDataOnDemand.invoiceDataOnDemand;
    
    public InvoiceItem InvoiceItemDataOnDemand.getNewTransientInvoiceItem(int index) {
        InvoiceItem obj = new InvoiceItem();
        setAmount(obj, index);
        setInvoice(obj, index);
        setItemDesc(obj, index);
        setItemName(obj, index);
        setItemNumber(obj, index);
        setQty(obj, index);
        setUnitPrice(obj, index);
        return obj;
    }
    
    public void InvoiceItemDataOnDemand.setAmount(InvoiceItem obj, int index) {
        BigDecimal amount = BigDecimal.valueOf(index);
        obj.setAmount(amount);
    }
    
    public void InvoiceItemDataOnDemand.setInvoice(InvoiceItem obj, int index) {
        Invoice invoice = invoiceDataOnDemand.getRandomInvoice();
        obj.setInvoice(invoice);
    }
    
    public void InvoiceItemDataOnDemand.setItemDesc(InvoiceItem obj, int index) {
        String itemDesc = "itemDesc_" + index;
        obj.setItemDesc(itemDesc);
    }
    
    public void InvoiceItemDataOnDemand.setItemName(InvoiceItem obj, int index) {
        String itemName = "itemName_" + index;
        obj.setItemName(itemName);
    }
    
    public void InvoiceItemDataOnDemand.setItemNumber(InvoiceItem obj, int index) {
        String itemNumber = "itemNumber_" + index;
        obj.setItemNumber(itemNumber);
    }
    
    public void InvoiceItemDataOnDemand.setQty(InvoiceItem obj, int index) {
        BigDecimal qty = BigDecimal.valueOf(index);
        obj.setQty(qty);
    }
    
    public void InvoiceItemDataOnDemand.setUnitPrice(InvoiceItem obj, int index) {
        BigDecimal unitPrice = BigDecimal.valueOf(index);
        obj.setUnitPrice(unitPrice);
    }
    
    public InvoiceItem InvoiceItemDataOnDemand.getSpecificInvoiceItem(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        InvoiceItem obj = data.get(index);
        return InvoiceItem.findInvoiceItem(obj.getId());
    }
    
    public InvoiceItem InvoiceItemDataOnDemand.getRandomInvoiceItem() {
        init();
        InvoiceItem obj = data.get(rnd.nextInt(data.size()));
        return InvoiceItem.findInvoiceItem(obj.getId());
    }
    
    public boolean InvoiceItemDataOnDemand.modifyInvoiceItem(InvoiceItem obj) {
        return false;
    }
    
    public void InvoiceItemDataOnDemand.init() {
        data = InvoiceItem.findInvoiceItemEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'InvoiceItem' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.booking.domain.InvoiceItem>();
        for (int i = 0; i < 10; i++) {
            InvoiceItem obj = getNewTransientInvoiceItem(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
