// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.booking.domain;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.booking.domain.Invoice;
import org.adorsys.geshotel.booking.domain.InvoiceState;
import org.adorsys.geshotel.booking.domain.PayementState;
import org.adorsys.geshotel.domain.Customer;
import org.adorsys.geshotel.domain.CustomerDataOnDemand;
import org.adorsys.geshotel.domain.UserAccount;
import org.adorsys.geshotel.domain.UserAccountDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect InvoiceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InvoiceDataOnDemand: @Component;
    
    private Random InvoiceDataOnDemand.rnd = new SecureRandom();
    
    private List<Invoice> InvoiceDataOnDemand.data;
    
    @Autowired
    private CustomerDataOnDemand InvoiceDataOnDemand.customerDataOnDemand;
    
    @Autowired
    private UserAccountDataOnDemand InvoiceDataOnDemand.userAccountDataOnDemand;
    
    public Invoice InvoiceDataOnDemand.getNewTransientInvoice(int index) {
        Invoice obj = new Invoice();
        setAmountDue(obj, index);
        setAmountPaid(obj, index);
        setCustomer(obj, index);
        setDateOfClose(obj, index);
        setDateOfCreate(obj, index);
        setInvoiceAmount(obj, index);
        setInvoiceState(obj, index);
        setMontantService(obj, index);
        setOriginator(obj, index);
        setOtherTaxes(obj, index);
        setPayementState(obj, index);
        setReste(obj, index);
        setValueAdddedTax(obj, index);
        return obj;
    }
    
    public void InvoiceDataOnDemand.setAmountDue(Invoice obj, int index) {
        BigDecimal amountDue = BigDecimal.valueOf(index);
        obj.setAmountDue(amountDue);
    }
    
    public void InvoiceDataOnDemand.setAmountPaid(Invoice obj, int index) {
        BigDecimal amountPaid = BigDecimal.valueOf(index);
        obj.setAmountPaid(amountPaid);
    }
    
    public void InvoiceDataOnDemand.setCustomer(Invoice obj, int index) {
        Customer customer = customerDataOnDemand.getRandomCustomer();
        obj.setCustomer(customer);
    }
    
    public void InvoiceDataOnDemand.setDateOfClose(Invoice obj, int index) {
        Date dateOfClose = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfClose(dateOfClose);
    }
    
    public void InvoiceDataOnDemand.setDateOfCreate(Invoice obj, int index) {
        Date dateOfCreate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfCreate(dateOfCreate);
    }
    
    public void InvoiceDataOnDemand.setInvoiceAmount(Invoice obj, int index) {
        BigDecimal invoiceAmount = BigDecimal.valueOf(index);
        obj.setInvoiceAmount(invoiceAmount);
    }
    
    public void InvoiceDataOnDemand.setInvoiceState(Invoice obj, int index) {
        InvoiceState invoiceState = InvoiceState.class.getEnumConstants()[0];
        obj.setInvoiceState(invoiceState);
    }
    
    public void InvoiceDataOnDemand.setMontantService(Invoice obj, int index) {
        BigDecimal montantService = BigDecimal.valueOf(index);
        obj.setMontantService(montantService);
    }
    
    public void InvoiceDataOnDemand.setOriginator(Invoice obj, int index) {
        UserAccount originator = userAccountDataOnDemand.getRandomUserAccount();
        obj.setOriginator(originator);
    }
    
    public void InvoiceDataOnDemand.setOtherTaxes(Invoice obj, int index) {
        BigDecimal otherTaxes = BigDecimal.valueOf(index);
        obj.setOtherTaxes(otherTaxes);
    }
    
    public void InvoiceDataOnDemand.setPayementState(Invoice obj, int index) {
        PayementState payementState = PayementState.class.getEnumConstants()[0];
        obj.setPayementState(payementState);
    }
    
    public void InvoiceDataOnDemand.setReste(Invoice obj, int index) {
        BigDecimal reste = BigDecimal.valueOf(index);
        obj.setReste(reste);
    }
    
    public void InvoiceDataOnDemand.setValueAdddedTax(Invoice obj, int index) {
        BigDecimal valueAdddedTax = BigDecimal.valueOf(index);
        obj.setValueAdddedTax(valueAdddedTax);
    }
    
    public Invoice InvoiceDataOnDemand.getSpecificInvoice(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Invoice obj = data.get(index);
        return Invoice.findInvoice(obj.getId());
    }
    
    public Invoice InvoiceDataOnDemand.getRandomInvoice() {
        init();
        Invoice obj = data.get(rnd.nextInt(data.size()));
        return Invoice.findInvoice(obj.getId());
    }
    
    public boolean InvoiceDataOnDemand.modifyInvoice(Invoice obj) {
        return false;
    }
    
    public void InvoiceDataOnDemand.init() {
        data = Invoice.findInvoiceEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Invoice' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.booking.domain.Invoice>();
        for (int i = 0; i < 10; i++) {
            Invoice obj = getNewTransientInvoice(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
