// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.resto.domain.BarRestauState;
import org.adorsys.geshotel.resto.domain.ProductGroup;
import org.adorsys.geshotel.resto.domain.ProductGroupDataOnDemand;
import org.adorsys.geshotel.resto.domain.ProductType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductTypeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductTypeDataOnDemand: @Component;
    
    private Random ProductTypeDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductType> ProductTypeDataOnDemand.data;
    
    @Autowired
    private ProductGroupDataOnDemand ProductTypeDataOnDemand.productGroupDataOnDemand;
    
    public ProductType ProductTypeDataOnDemand.getNewTransientProductType(int index) {
        ProductType obj = new ProductType();
        setDateOfStore(obj, index);
        setDescription(obj, index);
        setProductGroup(obj, index);
        setProductTypeKey(obj, index);
        setProductTypeState(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void ProductTypeDataOnDemand.setDateOfStore(ProductType obj, int index) {
        Date dateOfStore = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfStore(dateOfStore);
    }
    
    public void ProductTypeDataOnDemand.setDescription(ProductType obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void ProductTypeDataOnDemand.setProductGroup(ProductType obj, int index) {
        ProductGroup productGroup = productGroupDataOnDemand.getRandomProductGroup();
        obj.setProductGroup(productGroup);
    }
    
    public void ProductTypeDataOnDemand.setProductTypeKey(ProductType obj, int index) {
        String productTypeKey = "productTypeKey_" + index;
        obj.setProductTypeKey(productTypeKey);
    }
    
    public void ProductTypeDataOnDemand.setProductTypeState(ProductType obj, int index) {
        BarRestauState productTypeState = BarRestauState.class.getEnumConstants()[0];
        obj.setProductTypeState(productTypeState);
    }
    
    public void ProductTypeDataOnDemand.setTitle(ProductType obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public ProductType ProductTypeDataOnDemand.getSpecificProductType(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        ProductType obj = data.get(index);
        return ProductType.findProductType(obj.getId());
    }
    
    public ProductType ProductTypeDataOnDemand.getRandomProductType() {
        init();
        ProductType obj = data.get(rnd.nextInt(data.size()));
        return ProductType.findProductType(obj.getId());
    }
    
    public boolean ProductTypeDataOnDemand.modifyProductType(ProductType obj) {
        return false;
    }
    
    public void ProductTypeDataOnDemand.init() {
        data = ProductType.findProductTypeEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'ProductType' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.ProductType>();
        for (int i = 0; i < 10; i++) {
            ProductType obj = getNewTransientProductType(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
