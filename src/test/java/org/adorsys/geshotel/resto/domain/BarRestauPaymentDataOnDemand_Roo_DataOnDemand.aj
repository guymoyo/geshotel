// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.resto.domain.BarRestauPayment;
import org.adorsys.geshotel.resto.domain.CashRegister;
import org.adorsys.geshotel.resto.domain.CashRegisterDataOnDemand;
import org.adorsys.geshotel.resto.domain.Sale;
import org.adorsys.geshotel.resto.domain.SaleDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BarRestauPaymentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BarRestauPaymentDataOnDemand: @Component;
    
    private Random BarRestauPaymentDataOnDemand.rnd = new SecureRandom();
    
    private List<BarRestauPayment> BarRestauPaymentDataOnDemand.data;
    
    @Autowired
    private CashRegisterDataOnDemand BarRestauPaymentDataOnDemand.cashRegisterDataOnDemand;
    
    @Autowired
    private SaleDataOnDemand BarRestauPaymentDataOnDemand.saleDataOnDemand;
    
    public BarRestauPayment BarRestauPaymentDataOnDemand.getNewTransientBarRestauPayment(int index) {
        BarRestauPayment obj = new BarRestauPayment();
        setAmountDue(obj, index);
        setAmountIn(obj, index);
        setAmountOut(obj, index);
        setCashRegister(obj, index);
        setNote(obj, index);
        setSale(obj, index);
        return obj;
    }
    
    public void BarRestauPaymentDataOnDemand.setAmountDue(BarRestauPayment obj, int index) {
        BigDecimal amountDue = BigDecimal.valueOf(index);
        obj.setAmountDue(amountDue);
    }
    
    public void BarRestauPaymentDataOnDemand.setAmountIn(BarRestauPayment obj, int index) {
        BigDecimal amountIn = BigDecimal.valueOf(index);
        obj.setAmountIn(amountIn);
    }
    
    public void BarRestauPaymentDataOnDemand.setAmountOut(BarRestauPayment obj, int index) {
        BigDecimal amountOut = BigDecimal.valueOf(index);
        obj.setAmountOut(amountOut);
    }
    
    public void BarRestauPaymentDataOnDemand.setCashRegister(BarRestauPayment obj, int index) {
        CashRegister cashRegister = cashRegisterDataOnDemand.getRandomCashRegister();
        obj.setCashRegister(cashRegister);
    }
    
    public void BarRestauPaymentDataOnDemand.setNote(BarRestauPayment obj, int index) {
        String note = "note_" + index;
        obj.setNote(note);
    }
    
    public void BarRestauPaymentDataOnDemand.setSale(BarRestauPayment obj, int index) {
        Sale sale = saleDataOnDemand.getRandomSale();
        obj.setSale(sale);
    }
    
    public BarRestauPayment BarRestauPaymentDataOnDemand.getSpecificBarRestauPayment(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        BarRestauPayment obj = data.get(index);
        return BarRestauPayment.findBarRestauPayment(obj.getId());
    }
    
    public BarRestauPayment BarRestauPaymentDataOnDemand.getRandomBarRestauPayment() {
        init();
        BarRestauPayment obj = data.get(rnd.nextInt(data.size()));
        return BarRestauPayment.findBarRestauPayment(obj.getId());
    }
    
    public boolean BarRestauPaymentDataOnDemand.modifyBarRestauPayment(BarRestauPayment obj) {
        return false;
    }
    
    public void BarRestauPaymentDataOnDemand.init() {
        data = BarRestauPayment.findBarRestauPaymentEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'BarRestauPayment' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.BarRestauPayment>();
        for (int i = 0; i < 10; i++) {
            BarRestauPayment obj = getNewTransientBarRestauPayment(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
