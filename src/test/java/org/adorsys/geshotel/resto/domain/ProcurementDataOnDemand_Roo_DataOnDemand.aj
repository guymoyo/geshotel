// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.Boolean;
import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.domain.UserAccount;
import org.adorsys.geshotel.domain.UserAccountDataOnDemand;
import org.adorsys.geshotel.resto.domain.BarRestauState;
import org.adorsys.geshotel.resto.domain.Procurement;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProcurementDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProcurementDataOnDemand: @Component;
    
    private Random ProcurementDataOnDemand.rnd = new SecureRandom();
    
    private List<Procurement> ProcurementDataOnDemand.data;
    
    @Autowired
    private UserAccountDataOnDemand ProcurementDataOnDemand.userAccountDataOnDemand;
    
    public Procurement ProcurementDataOnDemand.getNewTransientProcurement(int index) {
        Procurement obj = new Procurement();
        setAmount(obj, index);
        setDateOfProcurement(obj, index);
        setIsLatestProcurement(obj, index);
        setProcurementKey(obj, index);
        setProcurementState(obj, index);
        setUserAccount(obj, index);
        return obj;
    }
    
    public void ProcurementDataOnDemand.setAmount(Procurement obj, int index) {
        BigDecimal amount = BigDecimal.valueOf(index);
        obj.setAmount(amount);
    }
    
    public void ProcurementDataOnDemand.setDateOfProcurement(Procurement obj, int index) {
        Date dateOfProcurement = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfProcurement(dateOfProcurement);
    }
    
    public void ProcurementDataOnDemand.setIsLatestProcurement(Procurement obj, int index) {
        Boolean isLatestProcurement = Boolean.TRUE;
        obj.setIsLatestProcurement(isLatestProcurement);
    }
    
    public void ProcurementDataOnDemand.setProcurementKey(Procurement obj, int index) {
        String procurementKey = "procurementKey_" + index;
        obj.setProcurementKey(procurementKey);
    }
    
    public void ProcurementDataOnDemand.setProcurementState(Procurement obj, int index) {
        BarRestauState procurementState = BarRestauState.class.getEnumConstants()[0];
        obj.setProcurementState(procurementState);
    }
    
    public void ProcurementDataOnDemand.setUserAccount(Procurement obj, int index) {
        UserAccount userAccount = userAccountDataOnDemand.getRandomUserAccount();
        obj.setUserAccount(userAccount);
    }
    
    public Procurement ProcurementDataOnDemand.getSpecificProcurement(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Procurement obj = data.get(index);
        return Procurement.findProcurement(obj.getId());
    }
    
    public Procurement ProcurementDataOnDemand.getRandomProcurement() {
        init();
        Procurement obj = data.get(rnd.nextInt(data.size()));
        return Procurement.findProcurement(obj.getId());
    }
    
    public boolean ProcurementDataOnDemand.modifyProcurement(Procurement obj) {
        return false;
    }
    
    public void ProcurementDataOnDemand.init() {
        data = Procurement.findProcurementEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Procurement' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.Procurement>();
        for (int i = 0; i < 10; i++) {
            Procurement obj = getNewTransientProcurement(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
