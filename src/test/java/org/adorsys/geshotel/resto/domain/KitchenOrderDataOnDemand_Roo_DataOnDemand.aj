// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.domain.UserAccount;
import org.adorsys.geshotel.domain.UserAccountDataOnDemand;
import org.adorsys.geshotel.resto.domain.BarRestauState;
import org.adorsys.geshotel.resto.domain.KitchenOrder;
import org.adorsys.geshotel.resto.domain.Sale;
import org.adorsys.geshotel.resto.domain.SaleDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect KitchenOrderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: KitchenOrderDataOnDemand: @Component;
    
    private Random KitchenOrderDataOnDemand.rnd = new SecureRandom();
    
    private List<KitchenOrder> KitchenOrderDataOnDemand.data;
    
    @Autowired
    private SaleDataOnDemand KitchenOrderDataOnDemand.saleDataOnDemand;
    
    @Autowired
    private UserAccountDataOnDemand KitchenOrderDataOnDemand.userAccountDataOnDemand;
    
    public KitchenOrder KitchenOrderDataOnDemand.getNewTransientKitchenOrder(int index) {
        KitchenOrder obj = new KitchenOrder();
        setDateOfOrdering(obj, index);
        setKitchenOrderItemState(obj, index);
        setKitchenOrderKey(obj, index);
        setKitchenOrderNumber(obj, index);
        setKitchenOrderPath(obj, index);
        setSale(obj, index);
        setSellerAccount(obj, index);
        return obj;
    }
    
    public void KitchenOrderDataOnDemand.setDateOfOrdering(KitchenOrder obj, int index) {
        Date dateOfOrdering = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfOrdering(dateOfOrdering);
    }
    
    public void KitchenOrderDataOnDemand.setKitchenOrderItemState(KitchenOrder obj, int index) {
        BarRestauState kitchenOrderItemState = BarRestauState.class.getEnumConstants()[0];
        obj.setKitchenOrderItemState(kitchenOrderItemState);
    }
    
    public void KitchenOrderDataOnDemand.setKitchenOrderKey(KitchenOrder obj, int index) {
        String kitchenOrderKey = "kitchenOrderKey_" + index;
        obj.setKitchenOrderKey(kitchenOrderKey);
    }
    
    public void KitchenOrderDataOnDemand.setKitchenOrderNumber(KitchenOrder obj, int index) {
        Integer kitchenOrderNumber = new Integer(index);
        obj.setKitchenOrderNumber(kitchenOrderNumber);
    }
    
    public void KitchenOrderDataOnDemand.setKitchenOrderPath(KitchenOrder obj, int index) {
        String kitchenOrderPath = "kitchenOrderPath_" + index;
        obj.setKitchenOrderPath(kitchenOrderPath);
    }
    
    public void KitchenOrderDataOnDemand.setSale(KitchenOrder obj, int index) {
        Sale sale = saleDataOnDemand.getRandomSale();
        obj.setSale(sale);
    }
    
    public void KitchenOrderDataOnDemand.setSellerAccount(KitchenOrder obj, int index) {
        UserAccount sellerAccount = userAccountDataOnDemand.getRandomUserAccount();
        obj.setSellerAccount(sellerAccount);
    }
    
    public KitchenOrder KitchenOrderDataOnDemand.getSpecificKitchenOrder(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        KitchenOrder obj = data.get(index);
        return KitchenOrder.findKitchenOrder(obj.getId());
    }
    
    public KitchenOrder KitchenOrderDataOnDemand.getRandomKitchenOrder() {
        init();
        KitchenOrder obj = data.get(rnd.nextInt(data.size()));
        return KitchenOrder.findKitchenOrder(obj.getId());
    }
    
    public boolean KitchenOrderDataOnDemand.modifyKitchenOrder(KitchenOrder obj) {
        return false;
    }
    
    public void KitchenOrderDataOnDemand.init() {
        data = KitchenOrder.findKitchenOrderEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'KitchenOrder' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.KitchenOrder>();
        for (int i = 0; i < 10; i++) {
            KitchenOrder obj = getNewTransientKitchenOrder(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
