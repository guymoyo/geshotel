// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.domain.UserAccount;
import org.adorsys.geshotel.domain.UserAccountDataOnDemand;
import org.adorsys.geshotel.resto.domain.BarRestauState;
import org.adorsys.geshotel.resto.domain.CashRegister;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CashRegisterDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CashRegisterDataOnDemand: @Component;
    
    private Random CashRegisterDataOnDemand.rnd = new SecureRandom();
    
    private List<CashRegister> CashRegisterDataOnDemand.data;
    
    @Autowired
    private UserAccountDataOnDemand CashRegisterDataOnDemand.userAccountDataOnDemand;
    
    public CashRegister CashRegisterDataOnDemand.getNewTransientCashRegister(int index) {
        CashRegister obj = new CashRegister();
        setCashFund(obj, index);
        setCashRegisterKey(obj, index);
        setCashRegisterState(obj, index);
        setCashierAccount(obj, index);
        setDateOfClosing(obj, index);
        setDateOfOpening(obj, index);
        return obj;
    }
    
    public void CashRegisterDataOnDemand.setCashFund(CashRegister obj, int index) {
        BigDecimal cashFund = BigDecimal.valueOf(index);
        obj.setCashFund(cashFund);
    }
    
    public void CashRegisterDataOnDemand.setCashRegisterKey(CashRegister obj, int index) {
        String cashRegisterKey = "cashRegisterKey_" + index;
        obj.setCashRegisterKey(cashRegisterKey);
    }
    
    public void CashRegisterDataOnDemand.setCashRegisterState(CashRegister obj, int index) {
        BarRestauState cashRegisterState = BarRestauState.class.getEnumConstants()[0];
        obj.setCashRegisterState(cashRegisterState);
    }
    
    public void CashRegisterDataOnDemand.setCashierAccount(CashRegister obj, int index) {
        UserAccount cashierAccount = userAccountDataOnDemand.getRandomUserAccount();
        obj.setCashierAccount(cashierAccount);
    }
    
    public void CashRegisterDataOnDemand.setDateOfClosing(CashRegister obj, int index) {
        Date dateOfClosing = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfClosing(dateOfClosing);
    }
    
    public void CashRegisterDataOnDemand.setDateOfOpening(CashRegister obj, int index) {
        Date dateOfOpening = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfOpening(dateOfOpening);
    }
    
    public CashRegister CashRegisterDataOnDemand.getSpecificCashRegister(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        CashRegister obj = data.get(index);
        return CashRegister.findCashRegister(obj.getId());
    }
    
    public CashRegister CashRegisterDataOnDemand.getRandomCashRegister() {
        init();
        CashRegister obj = data.get(rnd.nextInt(data.size()));
        return CashRegister.findCashRegister(obj.getId());
    }
    
    public boolean CashRegisterDataOnDemand.modifyCashRegister(CashRegister obj) {
        return false;
    }
    
    public void CashRegisterDataOnDemand.init() {
        data = CashRegister.findCashRegisterEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'CashRegister' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.CashRegister>();
        for (int i = 0; i < 10; i++) {
            CashRegister obj = getNewTransientCashRegister(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
