// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.resto.domain.Discount;
import org.springframework.stereotype.Component;

privileged aspect DiscountDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DiscountDataOnDemand: @Component;
    
    private Random DiscountDataOnDemand.rnd = new SecureRandom();
    
    private List<Discount> DiscountDataOnDemand.data;
    
    public Discount DiscountDataOnDemand.getNewTransientDiscount(int index) {
        Discount obj = new Discount();
        setAmount(obj, index);
        setDescription(obj, index);
        setPercentage(obj, index);
        setRecordingDetails(obj, index);
        setTitle(obj, index);
        setValidFrom(obj, index);
        setValidTo(obj, index);
        return obj;
    }
    
    public void DiscountDataOnDemand.setAmount(Discount obj, int index) {
        BigDecimal amount = BigDecimal.valueOf(index);
        if (amount.compareTo(new BigDecimal("00.0")) == -1) {
            amount = new BigDecimal("00.0");
        }
        obj.setAmount(amount);
    }
    
    public void DiscountDataOnDemand.setDescription(Discount obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void DiscountDataOnDemand.setPercentage(Discount obj, int index) {
        BigDecimal percentage = BigDecimal.valueOf(index);
        if (percentage.compareTo(new BigDecimal("0.00")) == -1) {
            percentage = new BigDecimal("0.00");
        }
        obj.setPercentage(percentage);
    }
    
    public void DiscountDataOnDemand.setRecordingDetails(Discount obj, int index) {
        String recordingDetails = "recordingDetails_" + index;
        obj.setRecordingDetails(recordingDetails);
    }
    
    public void DiscountDataOnDemand.setTitle(Discount obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public void DiscountDataOnDemand.setValidFrom(Discount obj, int index) {
        Date validFrom = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setValidFrom(validFrom);
    }
    
    public void DiscountDataOnDemand.setValidTo(Discount obj, int index) {
        Date validTo = new Date(new Date().getTime() + 10000000L);
        obj.setValidTo(validTo);
    }
    
    public Discount DiscountDataOnDemand.getSpecificDiscount(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Discount obj = data.get(index);
        return Discount.findDiscount(obj.getId());
    }
    
    public Discount DiscountDataOnDemand.getRandomDiscount() {
        init();
        Discount obj = data.get(rnd.nextInt(data.size()));
        return Discount.findDiscount(obj.getId());
    }
    
    public boolean DiscountDataOnDemand.modifyDiscount(Discount obj) {
        return false;
    }
    
    public void DiscountDataOnDemand.init() {
        data = Discount.findDiscountEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Discount' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.Discount>();
        for (int i = 0; i < 10; i++) {
            Discount obj = getNewTransientDiscount(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
