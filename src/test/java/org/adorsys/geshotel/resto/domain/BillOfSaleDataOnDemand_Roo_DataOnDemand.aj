// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.resto.domain.BillOfSale;
import org.springframework.stereotype.Component;

privileged aspect BillOfSaleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BillOfSaleDataOnDemand: @Component;
    
    private Random BillOfSaleDataOnDemand.rnd = new SecureRandom();
    
    private List<BillOfSale> BillOfSaleDataOnDemand.data;
    
    public BillOfSale BillOfSaleDataOnDemand.getNewTransientBillOfSale(int index) {
        BillOfSale obj = new BillOfSale();
        setAmountDue(obj, index);
        setDateOfSale(obj, index);
        setDiscount(obj, index);
        setNote(obj, index);
        setRestaurantName(obj, index);
        setSellKey(obj, index);
        setSeller(obj, index);
        setTax(obj, index);
        setTotalAmount(obj, index);
        return obj;
    }
    
    public void BillOfSaleDataOnDemand.setAmountDue(BillOfSale obj, int index) {
        BigDecimal amountDue = BigDecimal.valueOf(index);
        obj.setAmountDue(amountDue);
    }
    
    public void BillOfSaleDataOnDemand.setDateOfSale(BillOfSale obj, int index) {
        Date dateOfSale = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfSale(dateOfSale);
    }
    
    public void BillOfSaleDataOnDemand.setDiscount(BillOfSale obj, int index) {
        BigDecimal discount = BigDecimal.valueOf(index);
        obj.setDiscount(discount);
    }
    
    public void BillOfSaleDataOnDemand.setNote(BillOfSale obj, int index) {
        String note = "note_" + index;
        obj.setNote(note);
    }
    
    public void BillOfSaleDataOnDemand.setRestaurantName(BillOfSale obj, int index) {
        String restaurantName = "restaurantName_" + index;
        obj.setRestaurantName(restaurantName);
    }
    
    public void BillOfSaleDataOnDemand.setSellKey(BillOfSale obj, int index) {
        String sellKey = "sellKey_" + index;
        obj.setSellKey(sellKey);
    }
    
    public void BillOfSaleDataOnDemand.setSeller(BillOfSale obj, int index) {
        String seller = "seller_" + index;
        obj.setSeller(seller);
    }
    
    public void BillOfSaleDataOnDemand.setTax(BillOfSale obj, int index) {
        BigDecimal tax = BigDecimal.valueOf(index);
        obj.setTax(tax);
    }
    
    public void BillOfSaleDataOnDemand.setTotalAmount(BillOfSale obj, int index) {
        BigDecimal totalAmount = BigDecimal.valueOf(index);
        obj.setTotalAmount(totalAmount);
    }
    
    public BillOfSale BillOfSaleDataOnDemand.getSpecificBillOfSale(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        BillOfSale obj = data.get(index);
        return BillOfSale.findBillOfSale(obj.getId());
    }
    
    public BillOfSale BillOfSaleDataOnDemand.getRandomBillOfSale() {
        init();
        BillOfSale obj = data.get(rnd.nextInt(data.size()));
        return BillOfSale.findBillOfSale(obj.getId());
    }
    
    public boolean BillOfSaleDataOnDemand.modifyBillOfSale(BillOfSale obj) {
        return false;
    }
    
    public void BillOfSaleDataOnDemand.init() {
        data = BillOfSale.findBillOfSaleEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'BillOfSale' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.BillOfSale>();
        for (int i = 0; i < 10; i++) {
            BillOfSale obj = getNewTransientBillOfSale(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
