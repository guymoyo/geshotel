// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.resto.domain.Product;
import org.adorsys.geshotel.resto.domain.ProductDataOnDemand;
import org.adorsys.geshotel.resto.domain.Sale;
import org.adorsys.geshotel.resto.domain.SaleDataOnDemand;
import org.adorsys.geshotel.resto.domain.SaleItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SaleItemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SaleItemDataOnDemand: @Component;
    
    private Random SaleItemDataOnDemand.rnd = new SecureRandom();
    
    private List<SaleItem> SaleItemDataOnDemand.data;
    
    @Autowired
    private ProductDataOnDemand SaleItemDataOnDemand.productDataOnDemand;
    
    @Autowired
    private SaleDataOnDemand SaleItemDataOnDemand.saleDataOnDemand;
    
    public SaleItem SaleItemDataOnDemand.getNewTransientSaleItem(int index) {
        SaleItem obj = new SaleItem();
        setAmount(obj, index);
        setDateOfSale(obj, index);
        setProduct(obj, index);
        setQty(obj, index);
        setSale(obj, index);
        setSaleItemKey(obj, index);
        setSeller(obj, index);
        setUnitPrice(obj, index);
        return obj;
    }
    
    public void SaleItemDataOnDemand.setAmount(SaleItem obj, int index) {
        BigDecimal amount = BigDecimal.valueOf(index);
        obj.setAmount(amount);
    }
    
    public void SaleItemDataOnDemand.setDateOfSale(SaleItem obj, int index) {
        Date dateOfSale = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfSale(dateOfSale);
    }
    
    public void SaleItemDataOnDemand.setProduct(SaleItem obj, int index) {
        Product product = productDataOnDemand.getRandomProduct();
        obj.setProduct(product);
    }
    
    public void SaleItemDataOnDemand.setQty(SaleItem obj, int index) {
        BigDecimal qty = BigDecimal.valueOf(index);
        obj.setQty(qty);
    }
    
    public void SaleItemDataOnDemand.setSale(SaleItem obj, int index) {
        Sale sale = saleDataOnDemand.getRandomSale();
        obj.setSale(sale);
    }
    
    public void SaleItemDataOnDemand.setSaleItemKey(SaleItem obj, int index) {
        String saleItemKey = "saleItemKey_" + index;
        obj.setSaleItemKey(saleItemKey);
    }
    
    public void SaleItemDataOnDemand.setSeller(SaleItem obj, int index) {
        String seller = "seller_" + index;
        obj.setSeller(seller);
    }
    
    public void SaleItemDataOnDemand.setUnitPrice(SaleItem obj, int index) {
        BigDecimal unitPrice = BigDecimal.valueOf(index);
        obj.setUnitPrice(unitPrice);
    }
    
    public SaleItem SaleItemDataOnDemand.getSpecificSaleItem(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        SaleItem obj = data.get(index);
        return SaleItem.findSaleItem(obj.getId());
    }
    
    public SaleItem SaleItemDataOnDemand.getRandomSaleItem() {
        init();
        SaleItem obj = data.get(rnd.nextInt(data.size()));
        return SaleItem.findSaleItem(obj.getId());
    }
    
    public boolean SaleItemDataOnDemand.modifySaleItem(SaleItem obj) {
        return false;
    }
    
    public void SaleItemDataOnDemand.init() {
        data = SaleItem.findSaleItemEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'SaleItem' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.SaleItem>();
        for (int i = 0; i < 10; i++) {
            SaleItem obj = getNewTransientSaleItem(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
