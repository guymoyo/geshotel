// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.booking.domain.Invoice;
import org.adorsys.geshotel.booking.domain.InvoiceDataOnDemand;
import org.adorsys.geshotel.domain.Customer;
import org.adorsys.geshotel.domain.CustomerDataOnDemand;
import org.adorsys.geshotel.resto.domain.BarRestauState;
import org.adorsys.geshotel.resto.domain.BrTable;
import org.adorsys.geshotel.resto.domain.BrTableDataOnDemand;
import org.adorsys.geshotel.resto.domain.CustomerType;
import org.adorsys.geshotel.resto.domain.Sale;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SaleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SaleDataOnDemand: @Component;
    
    private Random SaleDataOnDemand.rnd = new SecureRandom();
    
    private List<Sale> SaleDataOnDemand.data;
    
    @Autowired
    private BrTableDataOnDemand SaleDataOnDemand.brTableDataOnDemand;
    
    @Autowired
    private CustomerDataOnDemand SaleDataOnDemand.customerDataOnDemand;
    
    @Autowired
    private InvoiceDataOnDemand SaleDataOnDemand.invoiceDataOnDemand;
    
    public Sale SaleDataOnDemand.getNewTransientSale(int index) {
        Sale obj = new Sale();
        setBrTable(obj, index);
        setCustomer(obj, index);
        setCustomerType(obj, index);
        setInvoice(obj, index);
        setNote(obj, index);
        setRecordDate(obj, index);
        setSaleKey(obj, index);
        setSaleState(obj, index);
        setTax(obj, index);
        setTotalAmount(obj, index);
        setUserNameDescription(obj, index);
        return obj;
    }
    
    public void SaleDataOnDemand.setBrTable(Sale obj, int index) {
        BrTable brTable = brTableDataOnDemand.getRandomBrTable();
        obj.setBrTable(brTable);
    }
    
    public void SaleDataOnDemand.setCustomer(Sale obj, int index) {
        Customer customer = customerDataOnDemand.getRandomCustomer();
        obj.setCustomer(customer);
    }
    
    public void SaleDataOnDemand.setCustomerType(Sale obj, int index) {
        CustomerType customerType = CustomerType.class.getEnumConstants()[0];
        obj.setCustomerType(customerType);
    }
    
    public void SaleDataOnDemand.setInvoice(Sale obj, int index) {
        Invoice invoice = invoiceDataOnDemand.getRandomInvoice();
        obj.setInvoice(invoice);
    }
    
    public void SaleDataOnDemand.setNote(Sale obj, int index) {
        String note = "note_" + index;
        obj.setNote(note);
    }
    
    public void SaleDataOnDemand.setRecordDate(Sale obj, int index) {
        Date recordDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRecordDate(recordDate);
    }
    
    public void SaleDataOnDemand.setSaleKey(Sale obj, int index) {
        String saleKey = "saleKey_" + index;
        obj.setSaleKey(saleKey);
    }
    
    public void SaleDataOnDemand.setSaleState(Sale obj, int index) {
        BarRestauState saleState = BarRestauState.class.getEnumConstants()[0];
        obj.setSaleState(saleState);
    }
    
    public void SaleDataOnDemand.setTax(Sale obj, int index) {
        BigDecimal tax = BigDecimal.valueOf(index);
        obj.setTax(tax);
    }
    
    public void SaleDataOnDemand.setTotalAmount(Sale obj, int index) {
        BigDecimal totalAmount = BigDecimal.valueOf(index);
        obj.setTotalAmount(totalAmount);
    }
    
    public void SaleDataOnDemand.setUserNameDescription(Sale obj, int index) {
        String userNameDescription = "userNameDescription_" + index;
        obj.setUserNameDescription(userNameDescription);
    }
    
    public Sale SaleDataOnDemand.getSpecificSale(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Sale obj = data.get(index);
        return Sale.findSale(obj.getId());
    }
    
    public Sale SaleDataOnDemand.getRandomSale() {
        init();
        Sale obj = data.get(rnd.nextInt(data.size()));
        return Sale.findSale(obj.getId());
    }
    
    public boolean SaleDataOnDemand.modifySale(Sale obj) {
        return false;
    }
    
    public void SaleDataOnDemand.init() {
        data = Sale.findSaleEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Sale' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.Sale>();
        for (int i = 0; i < 10; i++) {
            Sale obj = getNewTransientSale(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
