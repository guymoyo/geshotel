// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.resto.domain.Supplier;
import org.springframework.stereotype.Component;

privileged aspect SupplierDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SupplierDataOnDemand: @Component;
    
    private Random SupplierDataOnDemand.rnd = new SecureRandom();
    
    private List<Supplier> SupplierDataOnDemand.data;
    
    public Supplier SupplierDataOnDemand.getNewTransientSupplier(int index) {
        Supplier obj = new Supplier();
        setAddress(obj, index);
        setDateOfCreation(obj, index);
        setDesignation(obj, index);
        setIdentifier(obj, index);
        setPhoneNumber(obj, index);
        setSupplierKey(obj, index);
        return obj;
    }
    
    public void SupplierDataOnDemand.setAddress(Supplier obj, int index) {
        String address = "address_" + index;
        obj.setAddress(address);
    }
    
    public void SupplierDataOnDemand.setDateOfCreation(Supplier obj, int index) {
        Date dateOfCreation = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfCreation(dateOfCreation);
    }
    
    public void SupplierDataOnDemand.setDesignation(Supplier obj, int index) {
        String designation = "designation_" + index;
        obj.setDesignation(designation);
    }
    
    public void SupplierDataOnDemand.setIdentifier(Supplier obj, int index) {
        String identifier = "identifier_" + index;
        obj.setIdentifier(identifier);
    }
    
    public void SupplierDataOnDemand.setPhoneNumber(Supplier obj, int index) {
        String phoneNumber = "phoneNumber_" + index;
        obj.setPhoneNumber(phoneNumber);
    }
    
    public void SupplierDataOnDemand.setSupplierKey(Supplier obj, int index) {
        String supplierKey = "supplierKey_" + index;
        obj.setSupplierKey(supplierKey);
    }
    
    public Supplier SupplierDataOnDemand.getSpecificSupplier(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Supplier obj = data.get(index);
        return Supplier.findSupplier(obj.getId());
    }
    
    public Supplier SupplierDataOnDemand.getRandomSupplier() {
        init();
        Supplier obj = data.get(rnd.nextInt(data.size()));
        return Supplier.findSupplier(obj.getId());
    }
    
    public boolean SupplierDataOnDemand.modifySupplier(Supplier obj) {
        return false;
    }
    
    public void SupplierDataOnDemand.init() {
        data = Supplier.findSupplierEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Supplier' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.Supplier>();
        for (int i = 0; i < 10; i++) {
            Supplier obj = getNewTransientSupplier(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
