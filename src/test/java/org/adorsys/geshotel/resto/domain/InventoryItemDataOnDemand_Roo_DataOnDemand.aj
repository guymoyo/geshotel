// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.resto.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.resto.domain.Inventory;
import org.adorsys.geshotel.resto.domain.InventoryDataOnDemand;
import org.adorsys.geshotel.resto.domain.InventoryItem;
import org.adorsys.geshotel.resto.domain.Product;
import org.adorsys.geshotel.resto.domain.ProductDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect InventoryItemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InventoryItemDataOnDemand: @Component;
    
    private Random InventoryItemDataOnDemand.rnd = new SecureRandom();
    
    private List<InventoryItem> InventoryItemDataOnDemand.data;
    
    @Autowired
    private InventoryDataOnDemand InventoryItemDataOnDemand.inventoryDataOnDemand;
    
    @Autowired
    private ProductDataOnDemand InventoryItemDataOnDemand.productDataOnDemand;
    
    public InventoryItem InventoryItemDataOnDemand.getNewTransientInventoryItem(int index) {
        InventoryItem obj = new InventoryItem();
        setDesignation(obj, index);
        setEntry(obj, index);
        setFinalStock(obj, index);
        setInitialStock(obj, index);
        setInventory(obj, index);
        setProduct(obj, index);
        setSales(obj, index);
        return obj;
    }
    
    public void InventoryItemDataOnDemand.setDesignation(InventoryItem obj, int index) {
        String designation = "designation_" + index;
        obj.setDesignation(designation);
    }
    
    public void InventoryItemDataOnDemand.setEntry(InventoryItem obj, int index) {
        BigDecimal entry = BigDecimal.valueOf(index);
        obj.setEntry(entry);
    }
    
    public void InventoryItemDataOnDemand.setFinalStock(InventoryItem obj, int index) {
        BigDecimal finalStock = BigDecimal.valueOf(index);
        obj.setFinalStock(finalStock);
    }
    
    public void InventoryItemDataOnDemand.setInitialStock(InventoryItem obj, int index) {
        BigDecimal initialStock = BigDecimal.valueOf(index);
        obj.setInitialStock(initialStock);
    }
    
    public void InventoryItemDataOnDemand.setInventory(InventoryItem obj, int index) {
        Inventory inventory = inventoryDataOnDemand.getRandomInventory();
        obj.setInventory(inventory);
    }
    
    public void InventoryItemDataOnDemand.setProduct(InventoryItem obj, int index) {
        Product product = productDataOnDemand.getRandomProduct();
        obj.setProduct(product);
    }
    
    public void InventoryItemDataOnDemand.setSales(InventoryItem obj, int index) {
        BigDecimal sales = BigDecimal.valueOf(index);
        obj.setSales(sales);
    }
    
    public InventoryItem InventoryItemDataOnDemand.getSpecificInventoryItem(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        InventoryItem obj = data.get(index);
        return InventoryItem.findInventoryItem(obj.getId());
    }
    
    public InventoryItem InventoryItemDataOnDemand.getRandomInventoryItem() {
        init();
        InventoryItem obj = data.get(rnd.nextInt(data.size()));
        return InventoryItem.findInventoryItem(obj.getId());
    }
    
    public boolean InventoryItemDataOnDemand.modifyInventoryItem(InventoryItem obj) {
        return false;
    }
    
    public void InventoryItemDataOnDemand.init() {
        data = InventoryItem.findInventoryItemEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'InventoryItem' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.resto.domain.InventoryItem>();
        for (int i = 0; i < 10; i++) {
            InventoryItem obj = getNewTransientInventoryItem(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
