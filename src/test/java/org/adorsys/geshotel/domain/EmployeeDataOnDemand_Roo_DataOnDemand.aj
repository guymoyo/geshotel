// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.domain.Employee;
import org.adorsys.geshotel.domain.Gender;
import org.adorsys.geshotel.domain.Service;
import org.adorsys.geshotel.domain.ServiceDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EmployeeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmployeeDataOnDemand: @Component;
    
    private Random EmployeeDataOnDemand.rnd = new SecureRandom();
    
    private List<Employee> EmployeeDataOnDemand.data;
    
    @Autowired
    private ServiceDataOnDemand EmployeeDataOnDemand.serviceDataOnDemand;
    
    public Employee EmployeeDataOnDemand.getNewTransientEmployee(int index) {
        Employee obj = new Employee();
        setBornDate(obj, index);
        setFullName(obj, index);
        setGender(obj, index);
        setIdentifier(obj, index);
        setService(obj, index);
        return obj;
    }
    
    public void EmployeeDataOnDemand.setBornDate(Employee obj, int index) {
        Date bornDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setBornDate(bornDate);
    }
    
    public void EmployeeDataOnDemand.setFullName(Employee obj, int index) {
        String fullName = "fullName_" + index;
        obj.setFullName(fullName);
    }
    
    public void EmployeeDataOnDemand.setGender(Employee obj, int index) {
        Gender gender = Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public void EmployeeDataOnDemand.setIdentifier(Employee obj, int index) {
        String identifier = "identifier_" + index;
        obj.setIdentifier(identifier);
    }
    
    public void EmployeeDataOnDemand.setService(Employee obj, int index) {
        Service service = serviceDataOnDemand.getRandomService();
        obj.setService(service);
    }
    
    public Employee EmployeeDataOnDemand.getSpecificEmployee(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Employee obj = data.get(index);
        return Employee.findEmployee(obj.getId());
    }
    
    public Employee EmployeeDataOnDemand.getRandomEmployee() {
        init();
        Employee obj = data.get(rnd.nextInt(data.size()));
        return Employee.findEmployee(obj.getId());
    }
    
    public boolean EmployeeDataOnDemand.modifyEmployee(Employee obj) {
        return false;
    }
    
    public void EmployeeDataOnDemand.init() {
        data = Employee.findEmployeeEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Employee' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.domain.Employee>();
        for (int i = 0; i < 10; i++) {
            Employee obj = getNewTransientEmployee(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
