// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.domain.Hotel;
import org.springframework.stereotype.Component;

privileged aspect HotelDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HotelDataOnDemand: @Component;
    
    private Random HotelDataOnDemand.rnd = new SecureRandom();
    
    private List<Hotel> HotelDataOnDemand.data;
    
    public Hotel HotelDataOnDemand.getNewTransientHotel(int index) {
        Hotel obj = new Hotel();
        setAddress(obj, index);
        setCity(obj, index);
        setCodePostal(obj, index);
        setEmail(obj, index);
        setFax(obj, index);
        setLogo(obj, index);
        setName(obj, index);
        setPhoneNumber(obj, index);
        setTVA(obj, index);
        setWebPage(obj, index);
        return obj;
    }
    
    public void HotelDataOnDemand.setAddress(Hotel obj, int index) {
        String Address = "Address_" + index;
        obj.setAddress(Address);
    }
    
    public void HotelDataOnDemand.setCity(Hotel obj, int index) {
        String City = "City_" + index;
        obj.setCity(City);
    }
    
    public void HotelDataOnDemand.setCodePostal(Hotel obj, int index) {
        String CodePostal = "CodePostal_" + index;
        obj.setCodePostal(CodePostal);
    }
    
    public void HotelDataOnDemand.setEmail(Hotel obj, int index) {
        String Email = "Email_" + index;
        obj.setEmail(Email);
    }
    
    public void HotelDataOnDemand.setFax(Hotel obj, int index) {
        String Fax = "Fax_" + index;
        obj.setFax(Fax);
    }
    
    public void HotelDataOnDemand.setLogo(Hotel obj, int index) {
        String logo = "logo_" + index;
        obj.setLogo(logo);
    }
    
    public void HotelDataOnDemand.setName(Hotel obj, int index) {
        String Name = "Name_" + index;
        obj.setName(Name);
    }
    
    public void HotelDataOnDemand.setPhoneNumber(Hotel obj, int index) {
        String PhoneNumber = "PhoneNumber_" + index;
        obj.setPhoneNumber(PhoneNumber);
    }
    
    public void HotelDataOnDemand.setTVA(Hotel obj, int index) {
        BigDecimal TVA = BigDecimal.valueOf(index);
        obj.setTVA(TVA);
    }
    
    public void HotelDataOnDemand.setWebPage(Hotel obj, int index) {
        String WebPage = "WebPage_" + index;
        obj.setWebPage(WebPage);
    }
    
    public Hotel HotelDataOnDemand.getSpecificHotel(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Hotel obj = data.get(index);
        return Hotel.findHotel(obj.getId());
    }
    
    public Hotel HotelDataOnDemand.getRandomHotel() {
        init();
        Hotel obj = data.get(rnd.nextInt(data.size()));
        return Hotel.findHotel(obj.getId());
    }
    
    public boolean HotelDataOnDemand.modifyHotel(Hotel obj) {
        return false;
    }
    
    public void HotelDataOnDemand.init() {
        data = Hotel.findHotelEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Hotel' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.domain.Hotel>();
        for (int i = 0; i < 10; i++) {
            Hotel obj = getNewTransientHotel(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
