// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.adorsys.geshotel.domain;

import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.adorsys.geshotel.booking.domain.Invoice;
import org.adorsys.geshotel.booking.domain.InvoiceDataOnDemand;
import org.adorsys.geshotel.domain.PayementType;
import org.adorsys.geshotel.domain.Payment;
import org.adorsys.geshotel.domain.UserAccount;
import org.adorsys.geshotel.domain.UserAccountDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PaymentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PaymentDataOnDemand: @Component;
    
    private Random PaymentDataOnDemand.rnd = new SecureRandom();
    
    private List<Payment> PaymentDataOnDemand.data;
    
    @Autowired
    private UserAccountDataOnDemand PaymentDataOnDemand.userAccountDataOnDemand;
    
    @Autowired
    private InvoiceDataOnDemand PaymentDataOnDemand.invoiceDataOnDemand;
    
    public Payment PaymentDataOnDemand.getNewTransientPayment(int index) {
        Payment obj = new Payment();
        setAmount(obj, index);
        setCasheir(obj, index);
        setDatePayemment(obj, index);
        setInvoice(obj, index);
        setNote(obj, index);
        setPayementType(obj, index);
        return obj;
    }
    
    public void PaymentDataOnDemand.setAmount(Payment obj, int index) {
        BigDecimal Amount = BigDecimal.valueOf(index);
        obj.setAmount(Amount);
    }
    
    public void PaymentDataOnDemand.setCasheir(Payment obj, int index) {
        UserAccount casheir = userAccountDataOnDemand.getRandomUserAccount();
        obj.setCasheir(casheir);
    }
    
    public void PaymentDataOnDemand.setDatePayemment(Payment obj, int index) {
        Date datePayemment = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDatePayemment(datePayemment);
    }
    
    public void PaymentDataOnDemand.setInvoice(Payment obj, int index) {
        Invoice invoice = invoiceDataOnDemand.getRandomInvoice();
        obj.setInvoice(invoice);
    }
    
    public void PaymentDataOnDemand.setNote(Payment obj, int index) {
        String note = "note_" + index;
        obj.setNote(note);
    }
    
    public void PaymentDataOnDemand.setPayementType(Payment obj, int index) {
        PayementType payementType = PayementType.class.getEnumConstants()[0];
        obj.setPayementType(payementType);
    }
    
    public Payment PaymentDataOnDemand.getSpecificPayment(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Payment obj = data.get(index);
        return Payment.findPayment(obj.getId());
    }
    
    public Payment PaymentDataOnDemand.getRandomPayment() {
        init();
        Payment obj = data.get(rnd.nextInt(data.size()));
        return Payment.findPayment(obj.getId());
    }
    
    public boolean PaymentDataOnDemand.modifyPayment(Payment obj) {
        return false;
    }
    
    public void PaymentDataOnDemand.init() {
        data = Payment.findPaymentEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Payment' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.adorsys.geshotel.domain.Payment>();
        for (int i = 0; i < 10; i++) {
            Payment obj = getNewTransientPayment(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
